<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="preconnect" href="https://maps.googleapis.com">
    <link rel="preconnect" href="https://maps.gstatic.com">
    <script async defer src="https://maps.googleapis.com/maps/api/js?key=<%= googleMapsApiKey %>&callback=initMap"></script>
    <title>Create New Post</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 20px;
            background-color: #f4f4f4;
        }
        .container {
            max-width: 800px;
            margin: auto;
            background: white;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }
        .header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
        }
        .form-group {
            margin-bottom: 20px;
        }
        label {
            display: block;
            margin-bottom: 5px;
            color: #333;
            font-weight: bold;
        }
        input[type="text"],
        textarea {
            width: 100%;
            padding: 8px;
            border: 1px solid #ddd;
            border-radius: 4px;
            font-size: 16px;
        }
        textarea {
            min-height: 200px;
            resize: vertical;
        }
        .image-upload {
            border: 2px dashed #ddd;
            padding: 20px;
            text-align: center;
            margin-bottom: 20px;
            border-radius: 4px;
        }
        .submit-btn {
            background-color: #0066cc;
            color: white;
            padding: 10px 20px;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-size: 16px;
        }
        .submit-btn:hover {
            background-color: #0052a3;
        }
        .cancel-btn {
            background-color: #666;
            color: white;
            padding: 10px 20px;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            text-decoration: none;
            font-size: 16px;
            margin-right: 10px;
        }
        .cancel-btn:hover {
            background-color: #555;
        }
        .button-group {
            display: flex;
            gap: 10px;
        }
        .preview-images {
            display: flex;
            gap: 10px;
            flex-wrap: wrap;
            margin-top: 10px;
        }
        .preview-image {
            width: 100px;
            height: 100px;
            object-fit: cover;
            border-radius: 4px;
        }
        .map-container {
        display: none;  /* Hidden by default */
        margin-top: 10px;
        border-radius: 8px;
        overflow: hidden;
        }

        #map {
            width: 100%;
            height: 200px;
            border-radius: 8px;
        }

        .remove-location {
            color: #ff4444;
            cursor: pointer;
            margin-left: 10px;
            display: none;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>Create New Post</h1>
        </div>
        <form action="/blog/" method="POST" enctype="multipart/form-data" id="postForm">
            <div class="form-group">
                <label for="title">Title</label>
                <input type="text" id="title" name="title" required>
            </div>
            
            <div class="form-group">
                <label for="content">Content</label>
                <textarea id="content" name="content" required></textarea>
            </div>

            <div class="form-group">
                <div class="image-upload">
                    <label for="images">Upload Images (Max 5 images, 5MB each)</label>
                    <input type="file" id="images" name="images" accept="image/*" multiple onchange="previewImages(event)">
                    <div class="preview-images" id="imagePreview"></div>
                </div>
            </div>
            
            <div class="form-group">
                <div class="location-group">
                    <button type="button" class="location-btn" onclick="getLocation()">
                        üìç Add Location
                    </button>
                    <span id="locationDisplay" class="location-display"></span>
                    <span id="removeLocation" class="remove-location" onclick="removeLocation()">‚úï</span>
                    <input type="hidden" name="latitude" id="latitude">
                    <input type="hidden" name="longitude" id="longitude">
                </div>
                <div id="mapContainer" class="map-container">
                    <div id="map"></div>
                </div>
            </div>
            <div class="button-group">
                <a href="/posts" class="cancel-btn">Cancel</a>
                <button type="submit" class="submit-btn">Create Post</button>
            </div>
        </form>
        
    </div>

    <script>
        let map;
        let marker;
        let geocoder;

        function initializeServices() {
            geocoder = new google.maps.Geocoder();
        }

        function previewImages(event) {
            const preview = document.getElementById('imagePreview');
            preview.innerHTML = '';
            
            const files = event.target.files;
            
            if (files.length > 5) {
                alert('You can only upload up to 5 images');
                event.target.value = '';
                return;
            }

            for (const file of files) {
                if (file.size > 5 * 1024 * 1024) {
                    alert('Each image must be less than 5MB');
                    event.target.value = '';
                    preview.innerHTML = '';
                    return;
                }

                const reader = new FileReader();
                reader.onload = function(e) {
                    const img = document.createElement('img');
                    img.src = e.target.result;
                    img.className = 'preview-image';
                    preview.appendChild(img);
                }
                reader.readAsDataURL(file);
            }
        }

        function initMap(lat, lng) {
            const location = { lat: lat, lng: lng };
            
            map = new google.maps.Map(document.getElementById("map"), {
                zoom: 15,
                center: location,
                mapTypeControl: false,
                streetViewControl: false,
                fullscreenControl: false
            });

            marker = new google.maps.Marker({
                position: location,
                map: map,
                draggable: true
            });

            google.maps.event.addListener(marker, 'dragend', function() {
                const position = marker.getPosition();
                updateLocation(position.lat(), position.lng());
            });
        }

        function getLocation() {
            // Show loading indicator
            document.getElementById('locationDisplay').textContent = 'üìç Getting location...';
            
            if (navigator.geolocation) {
                navigator.geolocation.getCurrentPosition(
                    async function(position) {
                        const lat = position.coords.latitude;
                        const lng = position.coords.longitude;
                        
                        // Update UI first
                        document.getElementById('latitude').value = lat;
                        document.getElementById('longitude').value = lng;
                        document.getElementById('mapContainer').style.display = 'block';
                        document.getElementById('removeLocation').style.display = 'inline';
                        
                        // Initialize map if needed
                        if (!map) {
                            initMap(lat, lng);
                        } else {
                            const newLocation = new google.maps.LatLng(lat, lng);
                            map.setCenter(newLocation);
                            marker.setPosition(newLocation);
                        }
                        
                        // Get address in background
                        try {
                            const result = await geocodeLocation(lat, lng);
                            document.getElementById('locationDisplay').textContent = 
                                `üìç ${result || 'Location added'}`;
                        } catch (error) {
                            document.getElementById('locationDisplay').textContent = 'üìç Location added';
                        }
                    },
                    function(error) {
                        switch(error.code) {
                            case error.PERMISSION_DENIED:
                                alert("Please allow location access to add your location.");
                                break;
                            case error.POSITION_UNAVAILABLE:
                                alert("Location information unavailable.");
                                break;
                            case error.TIMEOUT:
                                alert("Location request timed out.");
                                break;
                            default:
                                alert("An unknown error occurred.");
                                break;
                        }
                        document.getElementById('locationDisplay').textContent = '';
                    }
                );
            } else {
                alert("Geolocation is not supported by this browser.");
                document.getElementById('locationDisplay').textContent = '';
            }
        }

        async function geocodeLocation(lat, lng) {
            if (!geocoder) return null;
            
            try {
                const response = await geocoder.geocode({
                    location: { lat: parseFloat(lat), lng: parseFloat(lng) }
                });
                
                if (response.results?.[0]) {
                    return response.results[0].formatted_address;
                }
            } catch (error) {
                console.error('Geocoding failed:', error);
            }
            return null;
        }

        async function updateLocation(lat, lng) {
            // Update hidden inputs
            document.getElementById('latitude').value = lat;
            document.getElementById('longitude').value = lng;
            
            try {
                const result = await geocodeLocation(lat, lng);
                document.getElementById('locationDisplay').textContent = 
                    `üìç ${result || 'Location added'}`;
            } catch (error) {
                document.getElementById('locationDisplay').textContent = 'üìç Location added';
            }
        }

        function removeLocation() {
            // Clear inputs
            document.getElementById('latitude').value = '';
            document.getElementById('longitude').value = '';
            document.getElementById('locationDisplay').textContent = '';
            
            // Hide map and remove button
            document.getElementById('mapContainer').style.display = 'none';
            document.getElementById('removeLocation').style.display = 'none';
            
            // Clear map and marker
            if (marker) {
                marker.setMap(null);
            }
            marker = null;
            map = null;
        }
    </script>
</body>
</html>